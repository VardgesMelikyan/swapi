{"ast":null,"code":"var _jsxFileName = \"/Users/vardges/Desktop/react projects/swapi/src/components/RandomPlanet/RandomPlanet.js\";\nimport React, { Component } from 'react';\nimport SwapiService from '../../services/SwapiService';\nimport Loading from '../Loading';\nimport ErrorIndicator from '../Alerts/ErrorIndicator';\nimport './RandomPlanet.css';\nexport default class RandomPlanet extends Component {\n  constructor() {\n    super();\n    this.SwapiService = new SwapiService();\n    this.state = {\n      planet: {},\n      loading: true,\n      error: false\n    };\n\n    this.onError = err => {\n      this.setState({\n        error: true,\n        loading: false\n      });\n    };\n\n    this.onPlanetLoaded = planet => {\n      this.setState({\n        planet,\n        loading: false\n      });\n    };\n\n    this.updatePlanet();\n  }\n\n  updatePlanet() {\n    const id = 2000;\n    this.SwapiService.getPlanet(id).then(this.onPlanetLoaded).catch(this.onError);\n  }\n\n  render() {\n    const {\n      planet,\n      loading,\n      error\n    } = this.state;\n    const hasData = !(loading || error);\n    const errorIndicator = error ? React.createElement(ErrorIndicator, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }) : null;\n    const spinner = loading ? React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }) : null;\n    const content = hasData ? React.createElement(PlanetView, {\n      planet: planet,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }) : null;\n    return React.createElement(\"div\", {\n      className: \"random-planet jumbotron rounded\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, errorIndicator, spinner, content);\n  }\n\n}\n\nconst PlanetView = ({\n  planet\n}) => {\n  const {\n    id,\n    name,\n    population,\n    rotationPeriod,\n    diameter\n  } = planet;\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    className: \"planet-image\",\n    src: `https://starwars-visualguide.com/assets/img/planets/${id}.jpg`,\n    alt: `https://starwars-visualguide.com/assets/img/planets/${id}.jpg`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, name), React.createElement(\"ul\", {\n    className: \"list-group list-group-flush\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    className: \"list-group-item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"term\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"Population\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, population)), React.createElement(\"li\", {\n    className: \"list-group-item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"term\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"Rotation Period\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, rotationPeriod)), React.createElement(\"li\", {\n    className: \"list-group-item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"term\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"Diameter\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, diameter)))));\n};","map":{"version":3,"sources":["/Users/vardges/Desktop/react projects/swapi/src/components/RandomPlanet/RandomPlanet.js"],"names":["React","Component","SwapiService","Loading","ErrorIndicator","RandomPlanet","constructor","state","planet","loading","error","onError","err","setState","onPlanetLoaded","updatePlanet","id","getPlanet","then","catch","render","hasData","errorIndicator","spinner","content","PlanetView","name","population","rotationPeriod","diameter"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport SwapiService from '../../services/SwapiService';\nimport Loading from '../Loading';\nimport ErrorIndicator from '../Alerts/ErrorIndicator';\nimport './RandomPlanet.css';\n\nexport default class RandomPlanet extends Component {\n    SwapiService = new SwapiService();\n    state = {\n        planet: {},\n        loading: true,\n        error: false\n    }\n    constructor() {\n        super()\n        this.updatePlanet();\n    }\n    onError = (err) => {\n        this.setState({\n            error: true,\n            loading: false\n        })\n    }\n    onPlanetLoaded = (planet) => {\n        this.setState({\n            planet,\n            loading: false\n        })\n    }\n    updatePlanet() {\n        const id = 2000;\n        this.SwapiService\n            .getPlanet(id)\n            .then(this.onPlanetLoaded)\n            .catch(this.onError)\n    }\n    render() {\n        const { planet, loading, error } = this.state;\n\n        const hasData = !(loading || error)\n        const errorIndicator = error ? <ErrorIndicator /> : null\n        const spinner = loading ? <Loading /> : null\n        const content = hasData ? <PlanetView planet={planet} /> : null\n        return (\n            <div className=\"random-planet jumbotron rounded\" >\n                {errorIndicator}\n                {spinner}\n                {content}\n            </div>\n\n        );\n    }\n}\nconst PlanetView = ({ planet }) => {\n    const { id, name, population, rotationPeriod, diameter } = planet;\n    return (\n        <React.Fragment>\n            <img className=\"planet-image\"\n                src={`https://starwars-visualguide.com/assets/img/planets/${id}.jpg`} alt={`https://starwars-visualguide.com/assets/img/planets/${id}.jpg`} />\n            <div>\n                <h4>{name}</h4>\n                <ul className=\"list-group list-group-flush\">\n                    <li className=\"list-group-item\">\n                        <span className=\"term\">Population</span>\n                        <span>{population}</span>\n                    </li>\n                    <li className=\"list-group-item\">\n                        <span className=\"term\">Rotation Period</span>\n                        <span>{rotationPeriod}</span>\n                    </li>\n                    <li className=\"list-group-item\">\n                        <span className=\"term\">Diameter</span>\n                        <span>{diameter}</span>\n                    </li>\n                </ul>\n            </div>\n        </React.Fragment>\n    );\n}"]},"metadata":{},"sourceType":"module"}