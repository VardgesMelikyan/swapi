{"ast":null,"code":"import { Component } from 'react';\nexport default class SwapiService extends Component {\n  constructor(...args) {\n    super(...args);\n    this._apiBase = 'https://swapi.co/api';\n\n    this._transformPlanet = planet => {\n      return {\n        id: this._extractId(planet.url),\n        name: planet.name,\n        population: planet.population,\n        rotationPeriod: planet.rotation_period,\n        diameter: planet.diameter\n      };\n    };\n\n    this._transformStarship = starship => {\n      return {\n        id: this._extractId(starship.url),\n        name: starship.name,\n        model: starship.model,\n        manufacruter: starship.manufacturer,\n        costInCreadits: starship.costInCreadits,\n        length: starship.length,\n        crew: starship.crew,\n        passengers: starship.passengers,\n        cargoCapasity: starship.cargoCapasity\n      };\n    };\n  }\n\n  async getResourse(url) {\n    let res = await fetch(`${this._apiBase}${url}`);\n\n    if (!res.ok) {\n      throw new Error(`Could not fetch ${this._apiBase}${url}, ${res.status}`);\n    }\n\n    return await res.json();\n  }\n\n  async getAllPeaple() {\n    let res = await this.getResourse(`/people/`);\n    return res.results.map(this._transformPerson);\n  }\n\n  async getPerson(id) {\n    const person = await this.getResourse(`/people/${id}/`);\n    return this._transformPerson(person);\n  }\n\n  async getAllPlanets() {\n    const res = await this.getResourse(`/planets/`);\n    return res.results.map(this._transformPlanet);\n  }\n\n  async getPlanet(id) {\n    const planet = await this.getResourse(`/planets/${id}/`);\n    return this._transformPlanet(planet);\n  }\n\n  async getAllStarships() {\n    let res = await this.getResourse(`/starships/`);\n    return res.results.map(this._transformStarship);\n  }\n\n  async getStarship(id) {\n    return this.getResourse(`/starships/${id}/`);\n  }\n\n  _extractId(item) {\n    const idRegExp = /\\/([0-9]*)\\/$/;\n    return item.match(idRegExp)[1];\n  }\n\n  _transformPerson(person) {\n    return {\n      id: this._extractId(person.url),\n      name: person.name,\n      gender: person.gender,\n      birthYear: person.birthYear,\n      eyeColor: person.eyeColor\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/vardges/Desktop/react projects/swapi/src/services/SwapiService.js"],"names":["Component","SwapiService","_apiBase","_transformPlanet","planet","id","_extractId","url","name","population","rotationPeriod","rotation_period","diameter","_transformStarship","starship","model","manufacruter","manufacturer","costInCreadits","length","crew","passengers","cargoCapasity","getResourse","res","fetch","ok","Error","status","json","getAllPeaple","results","map","_transformPerson","getPerson","person","getAllPlanets","getPlanet","getAllStarships","getStarship","item","idRegExp","match","gender","birthYear","eyeColor"],"mappings":"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","sourcesContent":["import { Component } from 'react'\n\nexport default class SwapiService extends Component {\n    _apiBase = 'https://swapi.co/api';\n\n    async getResourse(url) {\n        let res = await fetch(`${this._apiBase}${url}`);\n        if (!res.ok) {\n            throw new Error(`Could not fetch ${this._apiBase}${url}, ${res.status}`)\n        }\n        return await res.json()\n    }\n\n    async getAllPeaple() {\n        let res = await this.getResourse(`/people/`);\n        return res.results.map(this._transformPerson);\n    }\n    async getPerson(id) {\n        const person = await this.getResourse(`/people/${id}/`);\n        return this._transformPerson(person)\n    }\n\n    async getAllPlanets() {\n        const res = await this.getResourse(`/planets/`);\n        return res.results.map(this._transformPlanet);\n    }\n    async getPlanet(id) {\n        const planet = await this.getResourse(`/planets/${id}/`)\n        return this._transformPlanet(planet);\n    }\n\n    async getAllStarships() {\n        let res = await this.getResourse(`/starships/`);\n        return res.results.map(this._transformStarship);\n    }\n    async getStarship(id) {\n        return this.getResourse(`/starships/${id}/`);\n    }\n    _extractId(item) {\n        const idRegExp = /\\/([0-9]*)\\/$/\n        return item.match(idRegExp)[1]\n    }\n    _transformPlanet = (planet) => {\n        return {\n            id: this._extractId(planet.url),\n            name: planet.name,\n            population: planet.population,\n            rotationPeriod: planet.rotation_period,\n            diameter: planet.diameter\n        }\n    }\n    _transformPerson(person) {\n        return {\n            id: this._extractId(person.url),\n            name: person.name,\n            gender: person.gender,\n            birthYear: person.birthYear,\n            eyeColor: person.eyeColor\n        }\n    }\n    _transformStarship = (starship) => {\n        return {\n            id: this._extractId(starship.url),\n            name: starship.name,\n            model: starship.model,\n            manufacruter: starship.manufacturer,\n            costInCreadits: starship.costInCreadits,\n            length: starship.length,\n            crew: starship.crew,\n            passengers: starship.passengers,\n            cargoCapasity: starship.cargoCapasity\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}