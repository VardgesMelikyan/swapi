{"ast":null,"code":"var _jsxFileName = \"/Users/vardges/Desktop/react projects/swapi/src/components/RandomPlanet/RandomPlanet.js\";\nimport React, { Component } from 'react';\nimport SwapiService from '../../services/SwapiService';\nimport Loading from '../Loading';\nimport PlanetView from './View/PlanetView';\nimport ErrorIndicator from '../Alerts/ErrorIndicator';\nimport './RandomPlanet.css';\nexport default class RandomPlanet extends Component {\n  constructor(...args) {\n    super(...args);\n    this.swapiService = new SwapiService();\n    this.state = {\n      planet: {},\n      loading: true,\n      error: false\n    };\n\n    this.onError = err => {\n      this.setState({\n        error: true,\n        loading: false\n      });\n    };\n\n    this.onPlanetLoaded = planet => {\n      this.setState({\n        planet,\n        loading: false\n      });\n    };\n\n    this.updatePlanet = () => {\n      const id = Math.floor(Math.random() * 25) + 2;\n      this.swapiService.getPlanet(id).then(this.onPlanetLoaded).catch(this.onError);\n    };\n  }\n\n  componentDidMount() {\n    this.updatePlanet();\n    this.interval = setInterval(this.updatePlanet, 1500);\n  }\n\n  componentWillUnmount() {\n    console.log('ok');\n    clearInterval(this.interval);\n  }\n\n  render() {\n    const {\n      planet,\n      loading,\n      error\n    } = this.state;\n    const hasData = !(loading || error);\n    const errorIndicator = error ? React.createElement(ErrorIndicator, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }) : null;\n    const spinner = loading ? React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }) : null;\n    const content = hasData ? React.createElement(PlanetView, {\n      planet: planet,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }) : null;\n    return React.createElement(\"div\", {\n      className: \"random-planet jumbotron rounded\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, errorIndicator, spinner, content);\n  }\n\n}","map":{"version":3,"sources":["/Users/vardges/Desktop/react projects/swapi/src/components/RandomPlanet/RandomPlanet.js"],"names":["React","Component","SwapiService","Loading","PlanetView","ErrorIndicator","RandomPlanet","swapiService","state","planet","loading","error","onError","err","setState","onPlanetLoaded","updatePlanet","id","Math","floor","random","getPlanet","then","catch","componentDidMount","interval","setInterval","componentWillUnmount","console","log","clearInterval","render","hasData","errorIndicator","spinner","content"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AACA,OAAO,oBAAP;AAEA,eAAe,MAAMC,YAAN,SAA2BL,SAA3B,CAAqC;AAAA;AAAA;AAAA,SAChDM,YADgD,GACjC,IAAIL,YAAJ,EADiC;AAAA,SAEhDM,KAFgD,GAExC;AACJC,MAAAA,MAAM,EAAE,EADJ;AAEJC,MAAAA,OAAO,EAAE,IAFL;AAGJC,MAAAA,KAAK,EAAE;AAHH,KAFwC;;AAAA,SAehDC,OAfgD,GAerCC,GAAD,IAAS;AACf,WAAKC,QAAL,CAAc;AACVH,QAAAA,KAAK,EAAE,IADG;AAEVD,QAAAA,OAAO,EAAE;AAFC,OAAd;AAIH,KApB+C;;AAAA,SAqBhDK,cArBgD,GAqB9BN,MAAD,IAAY;AACzB,WAAKK,QAAL,CAAc;AACVL,QAAAA,MADU;AAEVC,QAAAA,OAAO,EAAE;AAFC,OAAd;AAIH,KA1B+C;;AAAA,SA2BhDM,YA3BgD,GA2BjC,MAAM;AACjB,YAAMC,EAAE,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,IAAiC,CAA5C;AACA,WAAKb,YAAL,CACKc,SADL,CACeJ,EADf,EAEKK,IAFL,CAEU,KAAKP,cAFf,EAGKQ,KAHL,CAGW,KAAKX,OAHhB;AAIH,KAjC+C;AAAA;;AAOhDY,EAAAA,iBAAiB,GAAG;AAChB,SAAKR,YAAL;AACA,SAAKS,QAAL,GAAgBC,WAAW,CAAC,KAAKV,YAAN,EAAoB,IAApB,CAA3B;AACH;;AACDW,EAAAA,oBAAoB,GAAG;AACnBC,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACAC,IAAAA,aAAa,CAAC,KAAKL,QAAN,CAAb;AACH;;AAoBDM,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEtB,MAAAA,MAAF;AAAUC,MAAAA,OAAV;AAAmBC,MAAAA;AAAnB,QAA6B,KAAKH,KAAxC;AAEA,UAAMwB,OAAO,GAAG,EAAEtB,OAAO,IAAIC,KAAb,CAAhB;AACA,UAAMsB,cAAc,GAAGtB,KAAK,GAAG,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAH,GAAwB,IAApD;AACA,UAAMuB,OAAO,GAAGxB,OAAO,GAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAH,GAAiB,IAAxC;AACA,UAAMyB,OAAO,GAAGH,OAAO,GAAG,oBAAC,UAAD;AAAY,MAAA,MAAM,EAAEvB,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAH,GAAoC,IAA3D;AACA,WACI;AAAK,MAAA,SAAS,EAAC,iCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKwB,cADL,EAEKC,OAFL,EAGKC,OAHL,CADJ;AAQH;;AAjD+C","sourcesContent":["import React, { Component } from 'react';\nimport SwapiService from '../../services/SwapiService';\nimport Loading from '../Loading';\nimport PlanetView from './View/PlanetView';\nimport ErrorIndicator from '../Alerts/ErrorIndicator';\nimport './RandomPlanet.css';\n\nexport default class RandomPlanet extends Component {\n    swapiService = new SwapiService();\n    state = {\n        planet: {},\n        loading: true,\n        error: false\n    }\n    componentDidMount() {\n        this.updatePlanet();\n        this.interval = setInterval(this.updatePlanet, 1500)\n    }\n    componentWillUnmount() {\n        console.log('ok')\n        clearInterval(this.interval)\n    }\n    onError = (err) => {\n        this.setState({\n            error: true,\n            loading: false\n        })\n    }\n    onPlanetLoaded = (planet) => {\n        this.setState({\n            planet,\n            loading: false\n        })\n    }\n    updatePlanet = () => {\n        const id = Math.floor(Math.random() * 25) + 2;\n        this.swapiService\n            .getPlanet(id)\n            .then(this.onPlanetLoaded)\n            .catch(this.onError)\n    }\n    render() {\n        const { planet, loading, error } = this.state;\n\n        const hasData = !(loading || error)\n        const errorIndicator = error ? <ErrorIndicator /> : null\n        const spinner = loading ? <Loading /> : null\n        const content = hasData ? <PlanetView planet={planet} /> : null\n        return (\n            <div className=\"random-planet jumbotron rounded\" >\n                {errorIndicator}\n                {spinner}\n                {content}\n            </div>\n\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}